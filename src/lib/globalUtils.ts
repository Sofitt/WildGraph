import type { GraphData } from '@/components/types/graph'
import { reassignNodeIds } from './reassignNodeIds'

/**
 * –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥—Ä–∞—Ñ–æ–º
 * –î–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ window.graphUtils –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞
 */
export const graphUtils = {
  /**
   * –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∞–µ—Ç ID –≤—Å–µ—Ö —É–∑–ª–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è
   * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª–∏: window.graphUtils.reassignIds(graphData)
   */
  reassignIds: (graphData: GraphData): GraphData => {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞—é –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ ID —É–∑–ª–æ–≤...')
    console.log('–¢–µ–∫—É—â–∏–µ —É–∑–ª—ã:', graphData.nodes.map(n => ({ id: n.id, name: n.name })))
    
    const updatedGraphData = reassignNodeIds(graphData)
    
    console.log('‚úÖ ID –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!')
    console.log('–ù–æ–≤—ã–µ —É–∑–ª—ã:', updatedGraphData.nodes.map(n => ({ id: n.id, name: n.name })))
    
    return updatedGraphData
  },

  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ ID —É–∑–ª–æ–≤
   */
  showNodeIds: (graphData: GraphData): void => {
    console.table(graphData.nodes.map(n => ({ 
      id: n.id, 
      name: n.name,
      anchors: n.anchor.join(', ') || '–Ω–µ—Ç'
    })))
  }
}

// –î–µ–ª–∞–µ–º —É—Ç–∏–ª–∏—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ
if (typeof window !== 'undefined') {
  (window as any).graphUtils = graphUtils
}
